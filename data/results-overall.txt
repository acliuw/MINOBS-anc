Run each version for 10 seconds and record number of generations, and
the score of the answer.

ASIA:

1) 3 -> 5
2) 2 -> 4
3) 2 -> 3, 3 -> 6
4) 4 -> 7, 0 -> 5, 3 -> 5, 5 -> 6
5) 0 -> 5, 5 -> 7, 0 -> 6
6) 3 -> 5, 2 -> 4, 2 -> 3


ALARM:

1) 24 -> 33
2) 13 -> 36, 14 -> 11
3) 23 -> 8, 30 -> 34, 18 -> 9
4) 29 -> 15, 14 -> 9, 12 -> 35, 33 -> 11
5) 4 -> 1



#Results=======================================

#Original#

- When considering a swap neighbour for an ordering, recomputes the score of the neighbour from scratch
- Uses a greedy hill-climbing method to find an DAG satisfying the ancestral constraints.

ASIA: (Optimal unconstrained score = 2303188316)
	SCORE 	  |	Generations

1) 2303188316 | 412
2) 2303188316 | 415
3) 2305384690 | 167
4) 2303500242 | 279
5) 2303500242 | 191
6) 2305384690 | 740

ALARM: (Optimal unconstrained score = 11174144919)
	SCORE 	   | Generations | Time to generate first generation

1) 11175819873 | 3 | 5.513
2) 11183729168 | 2 | 6.926
3) 11213441220 | 2 | 11.935
4) Inf
5) 11174203782 | 4 | 4.017

#Fast Swap Method#

- When considering a swap neighbour, use the optimal DAG for the current ordering as a starting
 point for the hill-climb
- At most one parent set can be infeasible, in which case we greedily pick a new parent set
- Uses same hill-climbing method as before

ASIA:
	SCORE     | Generations
1) 2303188316 | 1244
2) 2303188316 | 1899
3) 2305384690 | 1290
4) 2303500242 | 2119
5) 2303500242 | 1055
6) 2305384690 | 4294


ALARM:
	SCORE 	   | Generations | Time to generate first generation
1) 11174880724 | 15 | 0.744
2) 11183729168 | 13 | 0.837
3) 11222557510 | 7  | 0.685
4) Inf
5) 11181421699 | 18 | 0.658