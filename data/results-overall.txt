Run each version for 10 seconds and record number of generations, and
the score of the answer.

ASIA:

1) 3 -> 5
2) 2 -> 4
3) 2 -> 3, 3 -> 6
4) 4 -> 7, 0 -> 5, 3 -> 5, 5 -> 6
5) 0 -> 5, 5 -> 7, 0 -> 6
6) 3 -> 5, 2 -> 4, 2 -> 3


ALARM:

1) 24 -> 33
2) 13 -> 36, 14 -> 11
3) 23 -> 8, 30 -> 34, 18 -> 9
4) 29 -> 15, 14 -> 9, 12 -> 35, 33 -> 11
5) 4 -> 1



#Results=======================================

#Original#

- When considering a swap neighbour for an ordering, recomputes the score of the neighbour from scratch
- Uses a greedy hill-climbing method to find an DAG satisfying the ancestral constraints.

ASIA:
	SCORE 	  |	Generations
1) 2303188316 | 168
2) 2303188316 | 165
3) 2305384690 | 58
4) 2303500242 | 96
5) 2303500242 | 81
6) 2305384690 | 279

ALARM:
	SCORE 	   | Generations | Time to generate first generation
1) 11174203782 | 2 | 11.7
2) 11176511251 | 2 | 25.453
3) 11211517964 | 2 | 53.686
4) Inf		   | 2 | 41.928
5) 11181421699 | 2 | 9.722




#Fast Swap Method#

- When considering a swap neighbour, use the optimal DAG for the current ordering as a starting
 point for the hill-climb
- At most one parent set can be infeasible, in which case we greedily pick a new parent set
- Uses same hill-climbing method as before
/*
ASIA:
	SCORE     | Generations
1) 2303188316 | 1124
2) 2303188316 | 1087
3) 2305384690 | 867
4) 2303500242 | 1398
5) 2303500242 | 783
6) 2305384690 | 1306
*/

ALARM:
	SCORE 	   | Generations | Time to generate first generation
1) 11194512827 | 58 | 0.414
2) 11192361925 | 56 | 0.139
3) 

